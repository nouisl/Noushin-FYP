import React, { useEffect, useState } from 'react';
import Web3 from 'web3';

function MyContract() {
  // State variables to store the contract instance and the contract data
  const [contract, setContract] = useState(null);
  const [contractData, setContractData] = useState(null);

  // Connect to MetaMask and initialize the contract when the component mounts
  useEffect(() => {
    async function initContract() {
      // Connect to MetaMask
      const web3 = new Web3(window.ethereum);
      await window.ethereum.enable();

      // Get the contract ABI and address
      const contractABI = [...]; // ABI generated by the Solidity compiler
      const contractAddress = '0x...'; // Address of the deployed contract

      // Create an instance of the contract
      const contract = new web3.eth.Contract(contractABI, contractAddress);
      setContract(contract);

      // Call a contract function to get the contract data
      const data = await contract.methods.getData().call();
      setContractData(data);
    }

    initContract();
  }, []);

  // Render the component
  return (
    <div>
      {contractData ? (
        <p>Contract data: {contractData}</p>
      ) : (
        <p>Loading contract data...</p>
      )}
      {contract ? (
        <button onClick={() => contract.methods.updateData().send({ from: '0x...', gas: 1000000 })}>
          Update Data
        </button>
      ) : null}
    </div>
  );
}

export default MyContract;
